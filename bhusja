import pygame
import sys
import random

# Initialize Pygame
pygame.init()

# Game constants
SCREEN_WIDTH = 400
SCREEN_HEIGHT = 600
GRAVITY = 0.25
JUMP_STRENGTH = -6
PIPE_SPEED = 3
PIPE_FREQUENCY = 1500  # milliseconds
BIRD_START_POS = (100, 300)

# Colors
SKY_BLUE = (135, 206, 235)
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)

# Initialize screen
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Flappy Bird Clone")
clock = pygame.time.Clock()

# Load assets
try:
    bird_img = pygame.image.load("bird.png").convert_alpha()
    pipe_img = pygame.image.load("pipe.png").convert_alpha()
except FileNotFoundError:
    print("Error: Missing image files (bird.png and pipe.png required)")
    pygame.quit()
    sys.exit()

# Scale images if needed
bird_img = pygame.transform.scale(bird_img, (40, 30))
pipe_img = pygame.transform.scale(pipe_img, (60, 400))

class Bird:
    def __init__(self):
        self.img = bird_img
        self.rect = self.img.get_rect(center=BIRD_START_POS)
        self.velocity = 0
        self.max_rotation = 25
        self.rotation = 0

    def jump(self):
        self.velocity = JUMP_STRENGTH
        self.rotation = self.max_rotation

    def update(self):
        self.velocity += GRAVITY
        self.rect.y += self.velocity
        self.rotation = max(-90, self.rotation - 4)

    def draw(self):
        rotated_img = pygame.transform.rotate(self.img, self.rotation)
        screen.blit(rotated_img, self.rect)

class Pipe:
    def __init__(self, x):
        self.gap = 150
        self.top_height = random.randint(100, SCREEN_HEIGHT - 300)
        self.bottom_height = SCREEN_HEIGHT - self.top_height - self.gap
        
        self.top_pipe = pipe_img.get_rect(midbottom=(x, self.top_height))
        self.bottom_pipe = pipe_img.get_rect(midtop=(x, self.top_height + self.gap))
        self.passed = False

    def move(self):
        self.top_pipe.x -= PIPE_SPEED
        self.bottom_pipe.x -= PIPE_SPEED

    def draw(self):
        screen.blit(pipe_img, self.top_pipe)
        screen.blit(pygame.transform.flip(pipe_img, False, True), self.bottom_pipe)

def game_over():
    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE:
                    main()

        screen.fill(SKY_BLUE)
        font = pygame.font.Font(None, 74)
        text = font.render("Game Over", True, WHITE)
        screen.blit(text, (SCREEN_WIDTH//2 - 140, SCREEN_HEIGHT//2 - 50))
        pygame.display.update()
        clock.tick(60)

def main():
    bird = Bird()
    pipes = [Pipe(SCREEN_WIDTH + i * 300) for i in range(3)]
    score = 0
    last_pipe = pygame.time.get_ticks()

    while True:
        # Event handling
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE:
                    bird.jump()

        # Spawn new pipes
        time_now = pygame.time.get_ticks()
        if time_now - last_pipe > PIPE_FREQUENCY:
            pipes.append(Pipe(SCREEN_WIDTH + 100))
            last_pipe = time_now

        # Update positions
        bird.update()

        # Move pipes and check score
        for pipe in pipes:
            pipe.move()
            if not pipe.passed and pipe.top_pipe.right < bird.rect.left:
                pipe.passed = True
                score += 1

        # Remove off-screen pipes
        pipes = [pipe for pipe in pipes if pipe.top_pipe.right > -50]

        # Collision detection
        for pipe in pipes:
            if bird.rect.colliderect(pipe.top_pipe) or bird.rect.colliderect(pipe.bottom_pipe):
                game_over()
        if bird.rect.top <= 0 or bird.rect.bottom >= SCREEN_HEIGHT:
            game_over()

        # Drawing
        screen.fill(SKY_BLUE)
        bird.draw()
        for pipe in pipes:
            pipe.draw()

        # Display score
        font = pygame.font.Font(None, 74)
        text = font.render(str(score), True, WHITE)
        screen.blit(text, (SCREEN_WIDTH//2 - 15, 50))

        pygame.display.update()
        clock.tick(60)

if __name__ == "__main__":
    main()
